import numpy as np


def Vec(X):
    """Vectorize a matrix X (column-major ordering)."""
    return X.flatten('F')

def term2(u, params):
    """
    Computes the gradient of:
    Φ(u) = z^T A_tilde^T P^z A_tilde z
    where A_tilde has u-dependence in its 2nd row block (Kronecker structure),
    and the control-dependent term is:
        widetilde{u}(t) = [Bu; vec(Bu u^T B^T + W)]
    """
    z1   = params['z1']    # shape (n, 1)
    z2   = params['z2']    # shape (n^2, 1)
    A    = params['A']     # shape (n, n)
    B    = params['B']     # shape (n, p)
    Pz11 = params['Pz11']  # shape (n, n)
    Pz12 = params['Pz12']  # shape (n, n^2)
    Pz21 = params['Pz21']  # shape (n^2, n)
    Pz22 = params['Pz22']  # shape (n^2, n^2)

    Bu = (B @ u ).reshape(-1, 1)                  # shape (n, 1)
    kron_AA = np.kron(A, A)       # shape (n^2, n^2)

    Atilde_21 = np.kron(Bu, A) + np.kron(A, Bu)  # shape (n^2, n)

    z1_proj = A @ z1                          # shape (n, 1)
    z2_proj = Atilde_21 @ z1 + kron_AA @ z2   # shape (n^2,)
    upper_part = Pz11 @ z1_proj + Pz21 @ z2_proj        # shape (n,)
    lower_part = Pz12 @ z1_proj + Pz22 @ z2_proj        # shape (n^2,)
    full_proj = np.concatenate([upper_part, lower_part])  # shape (n + n^2,)

    n, p = B.shape
    I_p = np.eye(p)
    I_n = np.eye(n)
    kron_term = (np.kron(I_p, u.T) + np.kron(u.T, I_p)).T   # shape (p^2, p)
    du2_du = (np.kron(B, B) @ kron_term)                # shape (n^2, p)

    dutilde_du = np.vstack([B, du2_du])  # shape ((n + n^2), p)

    grad = 2 * dutilde_du.T @ full_proj  # shape (p,)  
    return grad

import numpy as np

def Vec(X):
    """Vectorize matrix X to a column vector."""
    return np.reshape(X, (-1, 1))

def term3(u, params):
    """
    Computes the derivative:
      ∂/∂u [ 2 z(t)^T A_tilde(t)^T P^z(t+1) u_tilde(t) ]
    where
      A_tilde(t) = [ A,             0;
                     (B u)⊗A + A⊗(B u),  A⊗A ]
      u_tilde(t) = [ B u;
                     vec(B u u^T B^T + W) ]
    and where P^z(t+1) is partitioned into blocks Pz11, Pz12, Pz21, Pz22.
    
    The derivative is (schematically) given by the sum of eight terms:
    
      T3_1 = 2 * B^T Pz11^T (A z1)
      T3_2 = 2 * B^T Pz21 ( (A⊗A) z2 )
      T3_3 = 2 * B^T Pz21^T ( (A⊗(B u) + (B u)⊗A) z1 )
      T3_4 = 2 * [ ( (A⊗B + B⊗A)^T Pz21 (B u) )^T z1 ]
      T3_5 = 2 * [ ( (I_p⊗u^T + u^T⊗I_p)^T (B⊗B)^T Pz12^T (A z1) ) ]
      T3_6 = 2 * [ ( (I_p⊗u^T + u^T⊗I_p)^T (B⊗B)^T Pz22^T ( (A⊗(B u) + (B u)⊗A) z1 ) ) ]
      T3_7 = 2 * [ ( (I_p⊗u^T + u^T⊗I_p)^T (B⊗B)^T Pz22^T ( (A⊗A) z2 ) ) ]
      T3_8 = 2 * [ ( (A⊗B + B⊗A)^T Pz22 vec(B u u^T B^T + W) )^T z1 ]
    
    In this implementation the terms T3_4 and T3_8 have been reordered (using transposition) so that the 
    inner dimensions match.
    """
    # Extract parameters
    z1   = params['z1']      # (n, 1)
    z2   = params['z2']      # (n^2, 1)
    A    = params['A']       # (n, n)
    B    = params['B']       # (n, p)
    Pz11 = params['Pz11']    # (n, n)
    Pz21 = params['Pz21']    # (n^2, n)
    Pz12 = params['Pz12']    # (n, n^2)
    Pz22 = params['Pz22']    # (n^2, n^2)
    W    = params['W']       # (n, n)
    p    = B.shape[1]
    
    Bu = B @ u              # (n, 1)
    
    # T3_1: 2 * B^T Pz11^T A z1
    T3_1 = 2 * (B.T @ Pz11.T @ (A @ z1))
    
    # T3_2: 2 * B^T Pz21 ( (A⊗A) z2 )
    T3_2 = 2 * (B.T @ Pz21 @ (np.kron(A, A) @ z2))
    
    # T3_3: 2 * B^T Pz21^T ( (A⊗(B u) + (B u)⊗A) z1 )
    T3_3 = 2 * (B.T @ Pz21.T @ ((np.kron(A, Bu) + np.kron(Bu, A)) @ z1))
    
    # T3_4: 2 * [ ( (A⊗B + B⊗A)^T Pz21 (B u) )^T z1 ]
    temp_T3_4 = (np.kron(A, B) + np.kron(B, A)).T @ (Pz21 @ (B @ u))  # expected shape: (n, 1)
    T3_4 = 2 * (temp_T3_4.T @ z1)  # produces a scalar or (1,1) array, which we treat as (p,1) after combination
    
    I_p = np.eye(p)
    # Ensure u is a column vector
    u_col = u.reshape(-1, 1)
    J = (np.kron(I_p, u_col.T) + np.kron(u_col.T, I_p)).T  # shape (p^2, p)
    
    # kron_term for (B⊗B)
    kron_term = np.kron(B, B)  # if B is (n, p), then kron_term is (n^2, p^2)
    
    # T3_5: 2 * [ (I_p⊗u^T + u^T⊗I_p)^T (B⊗B)^T Pz12^T (A z1) ]
    T3_5 = 2 * (J @ (kron_term.T @ Pz12.T @ (A @ z1)))
    
    # T3_6: 2 * [ (I_p⊗u^T + u^T⊗I_p)^T (B⊗B)^T Pz22^T ( (A⊗(B u) + (B u)⊗A) z1 ) ]
    T3_6 = 2 * (J @ (kron_term.T @ Pz22.T @ ((np.kron(A, Bu) + np.kron(Bu, A)) @ z1)))
    
    # T3_7: 2 * [ (I_p⊗u^T + u^T⊗I_p)^T (B⊗B)^T Pz22^T ( (A⊗A) z2 ) ]
    T3_7 = 2 * (J @ (kron_term.T @ Pz22.T @ (np.kron(A, A) @ z2)))
    
    # T3_8: 2 * [ ( (A⊗B + B⊗A)^T Pz22 vec(B u u^T B^T + W) )^T z1 ]
    vec_term = Vec(np.outer(Bu, Bu) + W)  # shape (n^2, 1)
    temp_T3_8 = (np.kron(A, B) + np.kron(B, A)).T @ (Pz22 @ vec_term)  # expected shape: (n, 1)
    T3_8 = 2 * (temp_T3_8.T @ z1)
    
    return T3_1 + T3_2 + T3_3 + T3_4 + T3_5 + T3_6 + T3_7 + T3_8

def term4(u, params):
    """
    Implements the derivative:
    ∂/∂u [ ũ(t)^T P ũ(t) ]
    = 2 B^T Pz11 B u
      + (I_p⊗u^T + u^T⊗I_p)(B⊗B)^T Pz21 B u
      + (I_p⊗u^T + u^T⊗I_p)(B⊗B)^T Pz12^T B u
      + B^T Pz21^T Vec(B u u^T B^T + W)
      + B^T Pz12 Vec(B u u^T B^T + W)
      + (I_p⊗u^T + u^T⊗I_p)(B⊗B)^T Pz22 Vec(B u u^T B^T + W)
      + (I_p⊗u^T + u^T⊗I_p)(B⊗B)^T Pz22^T Vec(B u u^T B^T + W)
    """
    B = params['B']         # (n x p)
    p = B.shape[1]
    Pz11 = params['Pz11']
    Pz21 = params['Pz21']
    Pz12 = params['Pz12']
    Pz22 = params['Pz22']
    W = params['W']
    
    Bu = B @ u              # (n,)
    I_p = np.eye(p)
    kron_term = np.kron(B, B)
    
    # T4_1: 2 * B^T Pz11 B u
    T4_1 = 2 * (B.T @ Pz11 @ (B @ u))
    # T4_2: (I_p⊗u^T + u^T⊗I_p)(B⊗B)^T Pz21 B u
    T4_2 = (np.kron(I_p, u.T) + np.kron(u.T, I_p)) @ (kron_term.T @ Pz21 @ (B @ u))
    # T4_3: (I_p⊗u^T + u^T⊗I_p)(B⊗B)^T Pz12^T B u
    T4_3 = (np.kron(I_p, u.T) + np.kron(u.T, I_p)) @ (kron_term.T @ Pz12.T @ (B @ u))
    
    # Vec(B u u^T B^T + W)
    vec_term = Vec(np.outer(Bu, Bu) + W)
    
    # T4_4: B^T Pz21^T Vec(B u u^T B^T + W)
    T4_4 = B.T @ Pz21.T @ vec_term
    # T4_5: B^T Pz12 vec_term
    T4_5 = B.T @ Pz12 @ vec_term
    # T4_6: (I_p⊗u^T + u^T⊗I_p)(B⊗B)^T Pz22 vec_term
    T4_6 = (np.kron(I_p, u.T) + np.kron(u.T, I_p)) @ (kron_term.T @ Pz22 @ vec_term)
    # T4_7: (I_p⊗u^T + u^T⊗I_p)(B⊗B)^T Pz22^T vec_term
    T4_7 = (np.kron(I_p, u.T) + np.kron(u.T, I_p)) @ (kron_term.T @ Pz22.T @ vec_term)
    
    return T4_1 + T4_2 + T4_3 + T4_4 + T4_5 + T4_6 + T4_7

def F(u, params):
    """
    Total gradient F(u) = 2 R u + term2 + term3 + term4.
    Here R is assumed provided in params.
    """
    R = params['R']
    term1 = 2 * R @ u
    t2 = term2(u, params)
    t3 = term3(u, params)
    t4 = term4(u, params)
    return term1 + t2 + t3 + t4

def approx_hessian(u, F_func, params, epsilon=1e-6):
    """
    Approximate Hessian H(u) = dF/du using finite differences.
    """
    n = len(u)
    H = np.zeros((n, n))
    f0 = F_func(u, params)
    for i in range(n):
        u_eps = u.copy()
        u_eps[i] += epsilon
        f1 = F_func(u_eps, params)
        H[:, i] = (f1 - f0) / epsilon
    return H

def newton_method(u0, params, k):
    """
    Run Newton's method for k iterations to solve F(u)=0.
    """
    u = u0.copy()
    for iteration in range(k):
        grad = F(u, params)
        Hessian = approx_hessian(u, F, params)
        # delta = grad / Hessian
        delta = np.linalg.solve(Hessian, grad)
        u = u - delta
        print("Iteration {}: u = {}".format(iteration+1, u))
    return u

# main
if __name__ == "__main__":
    # Example parameters
    n = 3  # state dimension
    p = 2  # control input dimension
    
    u0 = np.random.rand(p, 1)  # initial guess for u
    x = np.random.rand(n, 1)  # state vector
    
    z1 = x  # augmented state vector
    z2 = (Vec(x @ (x.T)).T).reshape(-1,1)  # augmented state vector (assuming x is a column vector)
    
    params = {
        'z1': z1, # augmented state vector
        'z2': z2, # augmented state vector
        'A': np.random.rand(n, n), # state transition matrix
        'B': np.random.rand(n, p), # control input matrix
        'Q': np.random.rand(n + n**2, n + n**2),  # cost matrix for state
        'R': np.random.rand(p, p),  # cost matrix for control inputs
        
        # to be figured out:
        'Pz11': np.random.rand(n, n), # cost-to-go matrix, element 1
        'Pz21': np.random.rand(n, n**2), # cost-to-go matrix, element 2
        'Pz12': np.random.rand(n**2, n), # cost-to-go matrix, element 3
        'Pz22': np.random.rand(n**2, n**2), # cost-to-go matrix, element 4
        'W': np.random.rand(n, n),  # covariance matrix for process noise w 
        # 'V': np.random.rand(n, n),   # covariance matrix for measurement noise v
    }
    
    k = 10  # number of iterations
    result = newton_method(u0, params, k)
    print("Final result: u =", result)
    
    
# to be checked and tested:
#   - check if the expression for term2, term3, and term4 are correct
#   - check if the gradient and Hessian are correct
#   - check if the test result is reasonable